/*
 * This protobuf file contains the definition of the requests and responses
 * used by a drand node to locally run some commands.
 */
syntax = "proto3";

package control;

option go_package = "github.com/dedis/drand/protobuf/control";

import "crypto/element.proto";

service Control {
    // PingPong returns an empty message. Purpose is to test the control port.
    rpc PingPong(Ping) returns (Pong) { }
    // InitDKG sends information to daemon to start a fresh DKG protocol 
    rpc InitDKG(DKGRequest) returns (DKGResponse) { }
    // InitReshares sends all informations so that the drand node knows how to
    // proceeed during the next resharing protocol.
    rpc InitReshare(ReshareRequest) returns (ReshareResponse) { }

    // Share returns the current private share used by the node 
    rpc Share(ShareRequest) returns (ShareResponse) { }
    // PublicKey returns the longterm public key of the drand node
    rpc PublicKey(PublicKeyRequest) returns (PublicKeyResponse) { }
    // PrivateKey returns the longterm private key of the drand node
    rpc PrivateKey(PrivateKeyRequest) returns (PrivateKeyResponse) { }
    // CollectiveKey returns the distributed public key used by the node
    rpc CollectiveKey(CokeyRequest) returns (CokeyResponse) { }
    // Group returns the current group file used
    rpc Group(GroupRequest) returns (GroupResponse) { }

}

message DKGRequest {
    GroupInfo dkg_group = 1; 
    bool is_leader = 2;
    // timeout as parsed by Golang's time.ParseDuration method.
    string timeout = 3; 
}

message DKGResponse {

}

// ReshareRequest contains references to the old and new group to perform the
// resharing protocol.
message ReshareRequest {
    // Old group that needs to issue the shares for the new group
    // NOTE: It can be empty / nil. In that case, the drand node will try to
    // load the group he belongs to at the moment, if any, and use it as the old
    // group.
    GroupInfo old = 1;
    GroupInfo new = 2;
    bool is_leader = 3;
    // timeout as parsed by Golang's time.ParseDuration method.
    string timeout = 4; 
}

message GroupInfo {
    oneof location {
        string path = 1;
        // XXX not implemented 
        string url = 2; 
    }
}

message ReshareResponse {

}

// ShareRequest requests the private share of a drand node
message ShareRequest {
}

// ShareResponse holds the private share of a drand node
message ShareResponse {
  uint32 index = 1;
  element.Scalar share = 2;
}

message Ping {
}

message Pong {
}

// PublicKeyRequest requests the public key of a drand node
message PublicKeyRequest {
}

// PublicKeyResponse holds the public key of a drand node
message PublicKeyResponse {
  element.Point pubKey = 1;
}

// PrivateKeyRequest requests the private key of a drand node
message PrivateKeyRequest {
}

// PrivateKeyResponse holds the private key of a drand node
message PrivateKeyResponse {
  element.Scalar priKey = 1;
}

// CokeyRequest requests the collective key of a drand node
message CokeyRequest {
}

// CokeyResponse holds the collective key of a drand node
message CokeyResponse {
  element.Point coKey = 1;
}

message GroupRequest {

}

message GroupResponse {
    // TOML-encoded group file 
    string groupToml = 1;
}
