// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dkg/dkg.proto

package dkg // import "github.com/dedis/drand/protobuf/dkg"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import vss "github.com/dedis/drand/protobuf/crypto/share/vss"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// special wrapper for resharing operation that serves two purposes:
// - indicate to non-leader old nodes that they should generate and send their
// deals
// - indicate to which new group are we resharing. drand should keep a list of
// new ready-to-operate groups allowed.
type ResharePacket struct {
	GroupHash            string     `protobuf:"bytes,1,opt,name=group_hash,json=groupHash,proto3" json:"group_hash,omitempty"`
	Packet               *DKGPacket `protobuf:"bytes,2,opt,name=packet,proto3" json:"packet,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ResharePacket) Reset()         { *m = ResharePacket{} }
func (m *ResharePacket) String() string { return proto.CompactTextString(m) }
func (*ResharePacket) ProtoMessage()    {}
func (*ResharePacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_dkg_52b0ed2b365fbd5b, []int{0}
}
func (m *ResharePacket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResharePacket.Unmarshal(m, b)
}
func (m *ResharePacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResharePacket.Marshal(b, m, deterministic)
}
func (dst *ResharePacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResharePacket.Merge(dst, src)
}
func (m *ResharePacket) XXX_Size() int {
	return xxx_messageInfo_ResharePacket.Size(m)
}
func (m *ResharePacket) XXX_DiscardUnknown() {
	xxx_messageInfo_ResharePacket.DiscardUnknown(m)
}

var xxx_messageInfo_ResharePacket proto.InternalMessageInfo

func (m *ResharePacket) GetGroupHash() string {
	if m != nil {
		return m.GroupHash
	}
	return ""
}

func (m *ResharePacket) GetPacket() *DKGPacket {
	if m != nil {
		return m.Packet
	}
	return nil
}

// empty return response
type ReshareResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReshareResponse) Reset()         { *m = ReshareResponse{} }
func (m *ReshareResponse) String() string { return proto.CompactTextString(m) }
func (*ReshareResponse) ProtoMessage()    {}
func (*ReshareResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dkg_52b0ed2b365fbd5b, []int{1}
}
func (m *ReshareResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReshareResponse.Unmarshal(m, b)
}
func (m *ReshareResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReshareResponse.Marshal(b, m, deterministic)
}
func (dst *ReshareResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReshareResponse.Merge(dst, src)
}
func (m *ReshareResponse) XXX_Size() int {
	return xxx_messageInfo_ReshareResponse.Size(m)
}
func (m *ReshareResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReshareResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReshareResponse proto.InternalMessageInfo

// DKGPacket is used by the nodes to run the dkg protocol before being able to
// generate randomness beacons.
type DKGPacket struct {
	Deal                 *Deal          `protobuf:"bytes,1,opt,name=deal,proto3" json:"deal,omitempty"`
	Response             *Response      `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
	Justification        *Justification `protobuf:"bytes,3,opt,name=justification,proto3" json:"justification,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *DKGPacket) Reset()         { *m = DKGPacket{} }
func (m *DKGPacket) String() string { return proto.CompactTextString(m) }
func (*DKGPacket) ProtoMessage()    {}
func (*DKGPacket) Descriptor() ([]byte, []int) {
	return fileDescriptor_dkg_52b0ed2b365fbd5b, []int{2}
}
func (m *DKGPacket) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DKGPacket.Unmarshal(m, b)
}
func (m *DKGPacket) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DKGPacket.Marshal(b, m, deterministic)
}
func (dst *DKGPacket) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DKGPacket.Merge(dst, src)
}
func (m *DKGPacket) XXX_Size() int {
	return xxx_messageInfo_DKGPacket.Size(m)
}
func (m *DKGPacket) XXX_DiscardUnknown() {
	xxx_messageInfo_DKGPacket.DiscardUnknown(m)
}

var xxx_messageInfo_DKGPacket proto.InternalMessageInfo

func (m *DKGPacket) GetDeal() *Deal {
	if m != nil {
		return m.Deal
	}
	return nil
}

func (m *DKGPacket) GetResponse() *Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *DKGPacket) GetJustification() *Justification {
	if m != nil {
		return m.Justification
	}
	return nil
}

type DKGResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DKGResponse) Reset()         { *m = DKGResponse{} }
func (m *DKGResponse) String() string { return proto.CompactTextString(m) }
func (*DKGResponse) ProtoMessage()    {}
func (*DKGResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dkg_52b0ed2b365fbd5b, []int{3}
}
func (m *DKGResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DKGResponse.Unmarshal(m, b)
}
func (m *DKGResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DKGResponse.Marshal(b, m, deterministic)
}
func (dst *DKGResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DKGResponse.Merge(dst, src)
}
func (m *DKGResponse) XXX_Size() int {
	return xxx_messageInfo_DKGResponse.Size(m)
}
func (m *DKGResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DKGResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DKGResponse proto.InternalMessageInfo

// Deal contains a share for a participant.
type Deal struct {
	// index of the dealer, the issuer of the share
	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// encrypted version of the deal
	Deal *vss.EncryptedDeal `protobuf:"bytes,2,opt,name=deal,proto3" json:"deal,omitempty"`
	// signature of the whole deal
	// NOTE: this is almost duplicated data, since the vss deal already includes
	// a signature. However it does not include the index of the dealer that
	// issue this deal, so another one is required. Best would be to merge vss
	// and dkg so we could use only one field of signature. For future work...
	// :)
	Signature            []byte   `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Deal) Reset()         { *m = Deal{} }
func (m *Deal) String() string { return proto.CompactTextString(m) }
func (*Deal) ProtoMessage()    {}
func (*Deal) Descriptor() ([]byte, []int) {
	return fileDescriptor_dkg_52b0ed2b365fbd5b, []int{4}
}
func (m *Deal) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Deal.Unmarshal(m, b)
}
func (m *Deal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Deal.Marshal(b, m, deterministic)
}
func (dst *Deal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deal.Merge(dst, src)
}
func (m *Deal) XXX_Size() int {
	return xxx_messageInfo_Deal.Size(m)
}
func (m *Deal) XXX_DiscardUnknown() {
	xxx_messageInfo_Deal.DiscardUnknown(m)
}

var xxx_messageInfo_Deal proto.InternalMessageInfo

func (m *Deal) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Deal) GetDeal() *vss.EncryptedDeal {
	if m != nil {
		return m.Deal
	}
	return nil
}

func (m *Deal) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// Response holds the response that a participant broadcast after having
// received a deal.
type Response struct {
	// index of the dealer for which this response is for
	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// response from the participant which received a deal
	Response             *vss.Response `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_dkg_52b0ed2b365fbd5b, []int{5}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (dst *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(dst, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Response) GetResponse() *vss.Response {
	if m != nil {
		return m.Response
	}
	return nil
}

// Justification holds the justification from a dealer after a participant
// issued a complaint response because of a supposedly invalid deal.
type Justification struct {
	// index of the dealer who is issuing this justification
	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// justification from the dealer
	Justification        *vss.Justification `protobuf:"bytes,2,opt,name=justification,proto3" json:"justification,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Justification) Reset()         { *m = Justification{} }
func (m *Justification) String() string { return proto.CompactTextString(m) }
func (*Justification) ProtoMessage()    {}
func (*Justification) Descriptor() ([]byte, []int) {
	return fileDescriptor_dkg_52b0ed2b365fbd5b, []int{6}
}
func (m *Justification) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Justification.Unmarshal(m, b)
}
func (m *Justification) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Justification.Marshal(b, m, deterministic)
}
func (dst *Justification) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Justification.Merge(dst, src)
}
func (m *Justification) XXX_Size() int {
	return xxx_messageInfo_Justification.Size(m)
}
func (m *Justification) XXX_DiscardUnknown() {
	xxx_messageInfo_Justification.DiscardUnknown(m)
}

var xxx_messageInfo_Justification proto.InternalMessageInfo

func (m *Justification) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Justification) GetJustification() *vss.Justification {
	if m != nil {
		return m.Justification
	}
	return nil
}

func init() {
	proto.RegisterType((*ResharePacket)(nil), "dkg.ResharePacket")
	proto.RegisterType((*ReshareResponse)(nil), "dkg.ReshareResponse")
	proto.RegisterType((*DKGPacket)(nil), "dkg.DKGPacket")
	proto.RegisterType((*DKGResponse)(nil), "dkg.DKGResponse")
	proto.RegisterType((*Deal)(nil), "dkg.Deal")
	proto.RegisterType((*Response)(nil), "dkg.Response")
	proto.RegisterType((*Justification)(nil), "dkg.Justification")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DkgClient is the client API for Dkg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DkgClient interface {
	Setup(ctx context.Context, in *DKGPacket, opts ...grpc.CallOption) (*DKGResponse, error)
	Reshare(ctx context.Context, in *ResharePacket, opts ...grpc.CallOption) (*ReshareResponse, error)
}

type dkgClient struct {
	cc *grpc.ClientConn
}

func NewDkgClient(cc *grpc.ClientConn) DkgClient {
	return &dkgClient{cc}
}

func (c *dkgClient) Setup(ctx context.Context, in *DKGPacket, opts ...grpc.CallOption) (*DKGResponse, error) {
	out := new(DKGResponse)
	err := c.cc.Invoke(ctx, "/dkg.Dkg/Setup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dkgClient) Reshare(ctx context.Context, in *ResharePacket, opts ...grpc.CallOption) (*ReshareResponse, error) {
	out := new(ReshareResponse)
	err := c.cc.Invoke(ctx, "/dkg.Dkg/Reshare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DkgServer is the server API for Dkg service.
type DkgServer interface {
	Setup(context.Context, *DKGPacket) (*DKGResponse, error)
	Reshare(context.Context, *ResharePacket) (*ReshareResponse, error)
}

func RegisterDkgServer(s *grpc.Server, srv DkgServer) {
	s.RegisterService(&_Dkg_serviceDesc, srv)
}

func _Dkg_Setup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DKGPacket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DkgServer).Setup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dkg.Dkg/Setup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DkgServer).Setup(ctx, req.(*DKGPacket))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dkg_Reshare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResharePacket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DkgServer).Reshare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dkg.Dkg/Reshare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DkgServer).Reshare(ctx, req.(*ResharePacket))
	}
	return interceptor(ctx, in, info, handler)
}

var _Dkg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dkg.Dkg",
	HandlerType: (*DkgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Setup",
			Handler:    _Dkg_Setup_Handler,
		},
		{
			MethodName: "Reshare",
			Handler:    _Dkg_Reshare_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dkg/dkg.proto",
}

func init() { proto.RegisterFile("dkg/dkg.proto", fileDescriptor_dkg_52b0ed2b365fbd5b) }

var fileDescriptor_dkg_52b0ed2b365fbd5b = []byte{
	// 383 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0xcf, 0x4f, 0xea, 0x40,
	0x10, 0x4e, 0xf9, 0xf5, 0xe8, 0xf0, 0xfa, 0x9e, 0x6e, 0x38, 0x90, 0x46, 0x12, 0x52, 0x23, 0x81,
	0x0b, 0x4d, 0xe0, 0xe2, 0xd9, 0x60, 0x30, 0x72, 0x31, 0x6b, 0xe2, 0xc1, 0x0b, 0xd9, 0x76, 0x97,
	0xb6, 0x16, 0xdb, 0xa6, 0xbb, 0x35, 0xfa, 0x57, 0xf8, 0x2f, 0x9b, 0x6e, 0xb7, 0xa5, 0x88, 0x78,
	0xd8, 0xc3, 0xce, 0x7c, 0x33, 0xdf, 0xf7, 0xcd, 0x0c, 0x18, 0x34, 0xf4, 0x6c, 0x1a, 0x7a, 0xb3,
	0x24, 0x8d, 0x45, 0x8c, 0x9a, 0x34, 0xf4, 0x4c, 0xd3, 0x4d, 0x3f, 0x12, 0x11, 0xdb, 0xdc, 0x27,
	0x29, 0xb3, 0xdf, 0x38, 0xcf, 0x5f, 0x01, 0xb0, 0x9e, 0xc0, 0xc0, 0x4c, 0x26, 0x1e, 0x88, 0x1b,
	0x32, 0x81, 0x86, 0x00, 0x5e, 0x1a, 0x67, 0xc9, 0xc6, 0x27, 0xdc, 0x1f, 0x68, 0x23, 0x6d, 0xa2,
	0x63, 0x5d, 0x46, 0xee, 0x08, 0xf7, 0xd1, 0x18, 0x3a, 0x89, 0x04, 0x0e, 0x1a, 0x23, 0x6d, 0xd2,
	0x9b, 0xff, 0x9b, 0xe5, 0x64, 0xcb, 0xf5, 0xaa, 0x28, 0xc7, 0x2a, 0x6b, 0x9d, 0xc3, 0x7f, 0xd5,
	0x17, 0x33, 0x9e, 0xc4, 0x11, 0x67, 0xd6, 0xa7, 0x06, 0x7a, 0x05, 0x44, 0x43, 0x68, 0x51, 0x46,
	0x76, 0x92, 0xa1, 0x37, 0xd7, 0x8b, 0x36, 0x8c, 0xec, 0xb0, 0x0c, 0xa3, 0x29, 0x74, 0x53, 0x55,
	0xa8, 0x98, 0x0c, 0x09, 0x29, 0xbb, 0xe1, 0x2a, 0x8d, 0xae, 0xc1, 0x78, 0xc9, 0xb8, 0x08, 0xb6,
	0x81, 0x4b, 0x44, 0x10, 0x47, 0x83, 0xa6, 0xc4, 0x23, 0x89, 0xbf, 0xaf, 0x67, 0xf0, 0x21, 0xd0,
	0x32, 0xa0, 0xb7, 0x5c, 0xaf, 0x2a, 0x81, 0x0e, 0xb4, 0x72, 0x05, 0xa8, 0x0f, 0xed, 0x20, 0xa2,
	0xec, 0x5d, 0x6a, 0x33, 0x70, 0xf1, 0x41, 0x63, 0x25, 0xb8, 0xa1, 0xba, 0xe7, 0x33, 0xbc, 0x8d,
	0xe4, 0x68, 0x19, 0xad, 0x29, 0xbf, 0x00, 0x9d, 0x07, 0x5e, 0x44, 0x44, 0x96, 0x32, 0x29, 0xe5,
	0x2f, 0xde, 0x07, 0xac, 0x35, 0x74, 0x4b, 0xbe, 0x13, 0x3c, 0x3f, 0x39, 0xcf, 0xb9, 0x8e, 0x9d,
	0x5b, 0x1b, 0x30, 0x0e, 0xfc, 0x9d, 0xe8, 0x78, 0x34, 0xa0, 0xba, 0x85, 0xdf, 0x06, 0x34, 0x67,
	0xd0, 0x5c, 0x86, 0x1e, 0x9a, 0x42, 0xfb, 0x91, 0x89, 0x2c, 0x41, 0xdf, 0xb6, 0x6d, 0x9e, 0x95,
	0xff, 0xca, 0xd3, 0x02, 0xfe, 0xa8, 0xbd, 0x23, 0x54, 0x2e, 0x6c, 0x7f, 0x5d, 0x66, 0xbf, 0x1e,
	0x2b, 0x8b, 0x6e, 0xae, 0x9e, 0x2f, 0xbd, 0x40, 0xf8, 0x99, 0x33, 0x73, 0xe3, 0x57, 0x9b, 0x32,
	0x1a, 0x70, 0x9b, 0xa6, 0x24, 0xa2, 0xb6, 0x3c, 0x52, 0x27, 0xdb, 0xe6, 0x27, 0xed, 0x74, 0xe4,
	0x6f, 0xf1, 0x15, 0x00, 0x00, 0xff, 0xff, 0xe7, 0xbb, 0xfb, 0x53, 0xe4, 0x02, 0x00, 0x00,
}
