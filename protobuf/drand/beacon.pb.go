// Code generated by protoc-gen-go. DO NOT EDIT.
// source: drand/beacon.proto

package drand // import "github.com/dedis/drand/protobuf/drand"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// BeaconRequest  holds a link to a previous signature, a timestamp and the
// partial signature for this beacon. All participants send and collects many of
// theses partial beacon packets to recreate locally one beacon
type BeaconRequest struct {
	Round        uint64 `protobuf:"varint,1,opt,name=round,proto3" json:"round,omitempty"`
	PreviousRand []byte `protobuf:"bytes,2,opt,name=previous_rand,json=previousRand,proto3" json:"previous_rand,omitempty"`
	// To prove the issuer comes from a valid node
	// It is a group point prefixed by the index of the issuer
	PartialRand          []byte   `protobuf:"bytes,3,opt,name=partial_rand,json=partialRand,proto3" json:"partial_rand,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BeaconRequest) Reset()         { *m = BeaconRequest{} }
func (m *BeaconRequest) String() string { return proto.CompactTextString(m) }
func (*BeaconRequest) ProtoMessage()    {}
func (*BeaconRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_beacon_204afdee46a8c022, []int{0}
}
func (m *BeaconRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BeaconRequest.Unmarshal(m, b)
}
func (m *BeaconRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BeaconRequest.Marshal(b, m, deterministic)
}
func (dst *BeaconRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeaconRequest.Merge(dst, src)
}
func (m *BeaconRequest) XXX_Size() int {
	return xxx_messageInfo_BeaconRequest.Size(m)
}
func (m *BeaconRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BeaconRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BeaconRequest proto.InternalMessageInfo

func (m *BeaconRequest) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *BeaconRequest) GetPreviousRand() []byte {
	if m != nil {
		return m.PreviousRand
	}
	return nil
}

func (m *BeaconRequest) GetPartialRand() []byte {
	if m != nil {
		return m.PartialRand
	}
	return nil
}

type BeaconResponse struct {
	PartialRand          []byte   `protobuf:"bytes,1,opt,name=partial_rand,json=partialRand,proto3" json:"partial_rand,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BeaconResponse) Reset()         { *m = BeaconResponse{} }
func (m *BeaconResponse) String() string { return proto.CompactTextString(m) }
func (*BeaconResponse) ProtoMessage()    {}
func (*BeaconResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_beacon_204afdee46a8c022, []int{1}
}
func (m *BeaconResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BeaconResponse.Unmarshal(m, b)
}
func (m *BeaconResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BeaconResponse.Marshal(b, m, deterministic)
}
func (dst *BeaconResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeaconResponse.Merge(dst, src)
}
func (m *BeaconResponse) XXX_Size() int {
	return xxx_messageInfo_BeaconResponse.Size(m)
}
func (m *BeaconResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BeaconResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BeaconResponse proto.InternalMessageInfo

func (m *BeaconResponse) GetPartialRand() []byte {
	if m != nil {
		return m.PartialRand
	}
	return nil
}

func init() {
	proto.RegisterType((*BeaconRequest)(nil), "drand.BeaconRequest")
	proto.RegisterType((*BeaconResponse)(nil), "drand.BeaconResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BeaconClient is the client API for Beacon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BeaconClient interface {
	NewBeacon(ctx context.Context, in *BeaconRequest, opts ...grpc.CallOption) (*BeaconResponse, error)
}

type beaconClient struct {
	cc *grpc.ClientConn
}

func NewBeaconClient(cc *grpc.ClientConn) BeaconClient {
	return &beaconClient{cc}
}

func (c *beaconClient) NewBeacon(ctx context.Context, in *BeaconRequest, opts ...grpc.CallOption) (*BeaconResponse, error) {
	out := new(BeaconResponse)
	err := c.cc.Invoke(ctx, "/drand.Beacon/NewBeacon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BeaconServer is the server API for Beacon service.
type BeaconServer interface {
	NewBeacon(context.Context, *BeaconRequest) (*BeaconResponse, error)
}

func RegisterBeaconServer(s *grpc.Server, srv BeaconServer) {
	s.RegisterService(&_Beacon_serviceDesc, srv)
}

func _Beacon_NewBeacon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeaconRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeaconServer).NewBeacon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drand.Beacon/NewBeacon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeaconServer).NewBeacon(ctx, req.(*BeaconRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Beacon_serviceDesc = grpc.ServiceDesc{
	ServiceName: "drand.Beacon",
	HandlerType: (*BeaconServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewBeacon",
			Handler:    _Beacon_NewBeacon_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "drand/beacon.proto",
}

func init() { proto.RegisterFile("drand/beacon.proto", fileDescriptor_beacon_204afdee46a8c022) }

var fileDescriptor_beacon_204afdee46a8c022 = []byte{
	// 209 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0x3d, 0x4f, 0xc5, 0x20,
	0x18, 0x85, 0x83, 0x7a, 0x6f, 0xe2, 0x6b, 0xeb, 0x40, 0x6a, 0xd2, 0x38, 0xd5, 0x1a, 0x63, 0x27,
	0x9a, 0xd8, 0xc5, 0xb9, 0x3f, 0xc0, 0x81, 0xd1, 0xc5, 0x40, 0x41, 0x25, 0xb1, 0x80, 0x7c, 0xe8,
	0xdf, 0x37, 0x85, 0x76, 0xf0, 0x76, 0x3c, 0x4f, 0xce, 0x93, 0x17, 0x0e, 0x60, 0xe1, 0x98, 0x16,
	0x3d, 0x97, 0x6c, 0x32, 0x9a, 0x58, 0x67, 0x82, 0xc1, 0x87, 0xc4, 0xda, 0x19, 0xca, 0x31, 0x61,
	0x2a, 0xbf, 0xa3, 0xf4, 0x01, 0x57, 0x70, 0x70, 0x26, 0x6a, 0x51, 0xa3, 0x06, 0x75, 0x17, 0x34,
	0x07, 0x7c, 0x0f, 0xa5, 0x75, 0xf2, 0x47, 0x99, 0xe8, 0xdf, 0x16, 0xaf, 0x3e, 0x6b, 0x50, 0x57,
	0xd0, 0x62, 0x83, 0x94, 0x69, 0x81, 0xef, 0xa0, 0xb0, 0xcc, 0x05, 0xc5, 0xbe, 0x72, 0xe7, 0x3c,
	0x75, 0xae, 0x56, 0xb6, 0x54, 0xda, 0x01, 0xae, 0xb7, 0x73, 0xde, 0x1a, 0xed, 0xe5, 0x4e, 0x42,
	0x3b, 0xe9, 0x69, 0x84, 0x63, 0x96, 0xf0, 0x33, 0x5c, 0xbe, 0xc8, 0xdf, 0x35, 0x54, 0x24, 0x7d,
	0x81, 0xfc, 0x7b, 0xff, 0xed, 0xcd, 0x09, 0xcd, 0x67, 0xc6, 0xc7, 0xd7, 0x87, 0x0f, 0x15, 0x3e,
	0x23, 0x27, 0x93, 0x99, 0x7b, 0x21, 0x85, 0xf2, 0x7d, 0x5e, 0x25, 0xcd, 0xc1, 0xe3, 0x7b, 0x8e,
	0xfc, 0x98, 0xf2, 0xf0, 0x17, 0x00, 0x00, 0xff, 0xff, 0x28, 0xb0, 0x62, 0xbb, 0x34, 0x01, 0x00,
	0x00,
}
